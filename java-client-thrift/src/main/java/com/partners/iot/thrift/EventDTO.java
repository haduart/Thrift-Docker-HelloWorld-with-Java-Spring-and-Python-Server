/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.partners.iot.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-03-08")
public class EventDTO implements org.apache.thrift.TBase<EventDTO, EventDTO._Fields>, java.io.Serializable, Cloneable, Comparable<EventDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EventDTO");

  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TS_FIELD_DESC = new org.apache.thrift.protocol.TField("ts", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STARRED_FIELD_DESC = new org.apache.thrift.protocol.TField("starred", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField START_EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("startEvent", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField STOP_EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("stopEvent", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField COMMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("comments", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EventDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EventDTOTupleSchemeFactory());
  }

  public String description; // required
  public String user; // required
  public String ts; // required
  public int id; // required
  public boolean starred; // required
  public boolean startEvent; // required
  public boolean stopEvent; // required
  public String typeName; // required
  public List<Comments> comments; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DESCRIPTION((short)1, "description"),
    USER((short)2, "user"),
    TS((short)3, "ts"),
    ID((short)4, "id"),
    STARRED((short)5, "starred"),
    START_EVENT((short)6, "startEvent"),
    STOP_EVENT((short)7, "stopEvent"),
    TYPE_NAME((short)8, "typeName"),
    COMMENTS((short)9, "comments");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DESCRIPTION
          return DESCRIPTION;
        case 2: // USER
          return USER;
        case 3: // TS
          return TS;
        case 4: // ID
          return ID;
        case 5: // STARRED
          return STARRED;
        case 6: // START_EVENT
          return START_EVENT;
        case 7: // STOP_EVENT
          return STOP_EVENT;
        case 8: // TYPE_NAME
          return TYPE_NAME;
        case 9: // COMMENTS
          return COMMENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __STARRED_ISSET_ID = 1;
  private static final int __STARTEVENT_ISSET_ID = 2;
  private static final int __STOPEVENT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COMMENTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TS, new org.apache.thrift.meta_data.FieldMetaData("ts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STARRED, new org.apache.thrift.meta_data.FieldMetaData("starred", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.START_EVENT, new org.apache.thrift.meta_data.FieldMetaData("startEvent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STOP_EVENT, new org.apache.thrift.meta_data.FieldMetaData("stopEvent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENTS, new org.apache.thrift.meta_data.FieldMetaData("comments", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Comments.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EventDTO.class, metaDataMap);
  }

  public EventDTO() {
  }

  public EventDTO(
    String description,
    String user,
    String ts,
    int id,
    boolean starred,
    boolean startEvent,
    boolean stopEvent,
    String typeName)
  {
    this();
    this.description = description;
    this.user = user;
    this.ts = ts;
    this.id = id;
    setIdIsSet(true);
    this.starred = starred;
    setStarredIsSet(true);
    this.startEvent = startEvent;
    setStartEventIsSet(true);
    this.stopEvent = stopEvent;
    setStopEventIsSet(true);
    this.typeName = typeName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EventDTO(EventDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetUser()) {
      this.user = other.user;
    }
    if (other.isSetTs()) {
      this.ts = other.ts;
    }
    this.id = other.id;
    this.starred = other.starred;
    this.startEvent = other.startEvent;
    this.stopEvent = other.stopEvent;
    if (other.isSetTypeName()) {
      this.typeName = other.typeName;
    }
    if (other.isSetComments()) {
      List<Comments> __this__comments = new ArrayList<Comments>(other.comments.size());
      for (Comments other_element : other.comments) {
        __this__comments.add(new Comments(other_element));
      }
      this.comments = __this__comments;
    }
  }

  public EventDTO deepCopy() {
    return new EventDTO(this);
  }

  @Override
  public void clear() {
    this.description = null;
    this.user = null;
    this.ts = null;
    setIdIsSet(false);
    this.id = 0;
    setStarredIsSet(false);
    this.starred = false;
    setStartEventIsSet(false);
    this.startEvent = false;
    setStopEventIsSet(false);
    this.stopEvent = false;
    this.typeName = null;
    this.comments = null;
  }

  public String getDescription() {
    return this.description;
  }

  public EventDTO setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getUser() {
    return this.user;
  }

  public EventDTO setUser(String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public String getTs() {
    return this.ts;
  }

  public EventDTO setTs(String ts) {
    this.ts = ts;
    return this;
  }

  public void unsetTs() {
    this.ts = null;
  }

  /** Returns true if field ts is set (has been assigned a value) and false otherwise */
  public boolean isSetTs() {
    return this.ts != null;
  }

  public void setTsIsSet(boolean value) {
    if (!value) {
      this.ts = null;
    }
  }

  public int getId() {
    return this.id;
  }

  public EventDTO setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public boolean isStarred() {
    return this.starred;
  }

  public EventDTO setStarred(boolean starred) {
    this.starred = starred;
    setStarredIsSet(true);
    return this;
  }

  public void unsetStarred() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARRED_ISSET_ID);
  }

  /** Returns true if field starred is set (has been assigned a value) and false otherwise */
  public boolean isSetStarred() {
    return EncodingUtils.testBit(__isset_bitfield, __STARRED_ISSET_ID);
  }

  public void setStarredIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARRED_ISSET_ID, value);
  }

  public boolean isStartEvent() {
    return this.startEvent;
  }

  public EventDTO setStartEvent(boolean startEvent) {
    this.startEvent = startEvent;
    setStartEventIsSet(true);
    return this;
  }

  public void unsetStartEvent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTEVENT_ISSET_ID);
  }

  /** Returns true if field startEvent is set (has been assigned a value) and false otherwise */
  public boolean isSetStartEvent() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTEVENT_ISSET_ID);
  }

  public void setStartEventIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTEVENT_ISSET_ID, value);
  }

  public boolean isStopEvent() {
    return this.stopEvent;
  }

  public EventDTO setStopEvent(boolean stopEvent) {
    this.stopEvent = stopEvent;
    setStopEventIsSet(true);
    return this;
  }

  public void unsetStopEvent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOPEVENT_ISSET_ID);
  }

  /** Returns true if field stopEvent is set (has been assigned a value) and false otherwise */
  public boolean isSetStopEvent() {
    return EncodingUtils.testBit(__isset_bitfield, __STOPEVENT_ISSET_ID);
  }

  public void setStopEventIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOPEVENT_ISSET_ID, value);
  }

  public String getTypeName() {
    return this.typeName;
  }

  public EventDTO setTypeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  public void unsetTypeName() {
    this.typeName = null;
  }

  /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
  public boolean isSetTypeName() {
    return this.typeName != null;
  }

  public void setTypeNameIsSet(boolean value) {
    if (!value) {
      this.typeName = null;
    }
  }

  public int getCommentsSize() {
    return (this.comments == null) ? 0 : this.comments.size();
  }

  public java.util.Iterator<Comments> getCommentsIterator() {
    return (this.comments == null) ? null : this.comments.iterator();
  }

  public void addToComments(Comments elem) {
    if (this.comments == null) {
      this.comments = new ArrayList<Comments>();
    }
    this.comments.add(elem);
  }

  public List<Comments> getComments() {
    return this.comments;
  }

  public EventDTO setComments(List<Comments> comments) {
    this.comments = comments;
    return this;
  }

  public void unsetComments() {
    this.comments = null;
  }

  /** Returns true if field comments is set (has been assigned a value) and false otherwise */
  public boolean isSetComments() {
    return this.comments != null;
  }

  public void setCommentsIsSet(boolean value) {
    if (!value) {
      this.comments = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((String)value);
      }
      break;

    case TS:
      if (value == null) {
        unsetTs();
      } else {
        setTs((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case STARRED:
      if (value == null) {
        unsetStarred();
      } else {
        setStarred((Boolean)value);
      }
      break;

    case START_EVENT:
      if (value == null) {
        unsetStartEvent();
      } else {
        setStartEvent((Boolean)value);
      }
      break;

    case STOP_EVENT:
      if (value == null) {
        unsetStopEvent();
      } else {
        setStopEvent((Boolean)value);
      }
      break;

    case TYPE_NAME:
      if (value == null) {
        unsetTypeName();
      } else {
        setTypeName((String)value);
      }
      break;

    case COMMENTS:
      if (value == null) {
        unsetComments();
      } else {
        setComments((List<Comments>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DESCRIPTION:
      return getDescription();

    case USER:
      return getUser();

    case TS:
      return getTs();

    case ID:
      return getId();

    case STARRED:
      return isStarred();

    case START_EVENT:
      return isStartEvent();

    case STOP_EVENT:
      return isStopEvent();

    case TYPE_NAME:
      return getTypeName();

    case COMMENTS:
      return getComments();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DESCRIPTION:
      return isSetDescription();
    case USER:
      return isSetUser();
    case TS:
      return isSetTs();
    case ID:
      return isSetId();
    case STARRED:
      return isSetStarred();
    case START_EVENT:
      return isSetStartEvent();
    case STOP_EVENT:
      return isSetStopEvent();
    case TYPE_NAME:
      return isSetTypeName();
    case COMMENTS:
      return isSetComments();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EventDTO)
      return this.equals((EventDTO)that);
    return false;
  }

  public boolean equals(EventDTO that) {
    if (that == null)
      return false;

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_ts = true && this.isSetTs();
    boolean that_present_ts = true && that.isSetTs();
    if (this_present_ts || that_present_ts) {
      if (!(this_present_ts && that_present_ts))
        return false;
      if (!this.ts.equals(that.ts))
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_starred = true;
    boolean that_present_starred = true;
    if (this_present_starred || that_present_starred) {
      if (!(this_present_starred && that_present_starred))
        return false;
      if (this.starred != that.starred)
        return false;
    }

    boolean this_present_startEvent = true;
    boolean that_present_startEvent = true;
    if (this_present_startEvent || that_present_startEvent) {
      if (!(this_present_startEvent && that_present_startEvent))
        return false;
      if (this.startEvent != that.startEvent)
        return false;
    }

    boolean this_present_stopEvent = true;
    boolean that_present_stopEvent = true;
    if (this_present_stopEvent || that_present_stopEvent) {
      if (!(this_present_stopEvent && that_present_stopEvent))
        return false;
      if (this.stopEvent != that.stopEvent)
        return false;
    }

    boolean this_present_typeName = true && this.isSetTypeName();
    boolean that_present_typeName = true && that.isSetTypeName();
    if (this_present_typeName || that_present_typeName) {
      if (!(this_present_typeName && that_present_typeName))
        return false;
      if (!this.typeName.equals(that.typeName))
        return false;
    }

    boolean this_present_comments = true && this.isSetComments();
    boolean that_present_comments = true && that.isSetComments();
    if (this_present_comments || that_present_comments) {
      if (!(this_present_comments && that_present_comments))
        return false;
      if (!this.comments.equals(that.comments))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_user = true && (isSetUser());
    list.add(present_user);
    if (present_user)
      list.add(user);

    boolean present_ts = true && (isSetTs());
    list.add(present_ts);
    if (present_ts)
      list.add(ts);

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_starred = true;
    list.add(present_starred);
    if (present_starred)
      list.add(starred);

    boolean present_startEvent = true;
    list.add(present_startEvent);
    if (present_startEvent)
      list.add(startEvent);

    boolean present_stopEvent = true;
    list.add(present_stopEvent);
    if (present_stopEvent)
      list.add(stopEvent);

    boolean present_typeName = true && (isSetTypeName());
    list.add(present_typeName);
    if (present_typeName)
      list.add(typeName);

    boolean present_comments = true && (isSetComments());
    list.add(present_comments);
    if (present_comments)
      list.add(comments);

    return list.hashCode();
  }

  @Override
  public int compareTo(EventDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTs()).compareTo(other.isSetTs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ts, other.ts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStarred()).compareTo(other.isSetStarred());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStarred()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.starred, other.starred);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartEvent()).compareTo(other.isSetStartEvent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartEvent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startEvent, other.startEvent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopEvent()).compareTo(other.isSetStopEvent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopEvent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopEvent, other.stopEvent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTypeName()).compareTo(other.isSetTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, other.typeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComments()).compareTo(other.isSetComments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comments, other.comments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EventDTO(");
    boolean first = true;

    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ts:");
    if (this.ts == null) {
      sb.append("null");
    } else {
      sb.append(this.ts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("starred:");
    sb.append(this.starred);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startEvent:");
    sb.append(this.startEvent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stopEvent:");
    sb.append(this.stopEvent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("typeName:");
    if (this.typeName == null) {
      sb.append("null");
    } else {
      sb.append(this.typeName);
    }
    first = false;
    if (isSetComments()) {
      if (!first) sb.append(", ");
      sb.append("comments:");
      if (this.comments == null) {
        sb.append("null");
      } else {
        sb.append(this.comments);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (description == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'description' was not present! Struct: " + toString());
    }
    if (user == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'user' was not present! Struct: " + toString());
    }
    if (ts == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ts' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'starred' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'startEvent' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'stopEvent' because it's a primitive and you chose the non-beans generator.
    if (typeName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'typeName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EventDTOStandardSchemeFactory implements SchemeFactory {
    public EventDTOStandardScheme getScheme() {
      return new EventDTOStandardScheme();
    }
  }

  private static class EventDTOStandardScheme extends StandardScheme<EventDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EventDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ts = iprot.readString();
              struct.setTsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STARRED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.starred = iprot.readBool();
              struct.setStarredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // START_EVENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.startEvent = iprot.readBool();
              struct.setStartEventIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STOP_EVENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.stopEvent = iprot.readBool();
              struct.setStopEventIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.typeName = iprot.readString();
              struct.setTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COMMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.comments = new ArrayList<Comments>(_list0.size);
                Comments _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new Comments();
                  _elem1.read(iprot);
                  struct.comments.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setCommentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStarred()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'starred' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStartEvent()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'startEvent' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStopEvent()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'stopEvent' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EventDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(struct.user);
        oprot.writeFieldEnd();
      }
      if (struct.ts != null) {
        oprot.writeFieldBegin(TS_FIELD_DESC);
        oprot.writeString(struct.ts);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STARRED_FIELD_DESC);
      oprot.writeBool(struct.starred);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_EVENT_FIELD_DESC);
      oprot.writeBool(struct.startEvent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STOP_EVENT_FIELD_DESC);
      oprot.writeBool(struct.stopEvent);
      oprot.writeFieldEnd();
      if (struct.typeName != null) {
        oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
        oprot.writeString(struct.typeName);
        oprot.writeFieldEnd();
      }
      if (struct.comments != null) {
        if (struct.isSetComments()) {
          oprot.writeFieldBegin(COMMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.comments.size()));
            for (Comments _iter3 : struct.comments)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EventDTOTupleSchemeFactory implements SchemeFactory {
    public EventDTOTupleScheme getScheme() {
      return new EventDTOTupleScheme();
    }
  }

  private static class EventDTOTupleScheme extends TupleScheme<EventDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EventDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.description);
      oprot.writeString(struct.user);
      oprot.writeString(struct.ts);
      oprot.writeI32(struct.id);
      oprot.writeBool(struct.starred);
      oprot.writeBool(struct.startEvent);
      oprot.writeBool(struct.stopEvent);
      oprot.writeString(struct.typeName);
      BitSet optionals = new BitSet();
      if (struct.isSetComments()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetComments()) {
        {
          oprot.writeI32(struct.comments.size());
          for (Comments _iter4 : struct.comments)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EventDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.description = iprot.readString();
      struct.setDescriptionIsSet(true);
      struct.user = iprot.readString();
      struct.setUserIsSet(true);
      struct.ts = iprot.readString();
      struct.setTsIsSet(true);
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.starred = iprot.readBool();
      struct.setStarredIsSet(true);
      struct.startEvent = iprot.readBool();
      struct.setStartEventIsSet(true);
      struct.stopEvent = iprot.readBool();
      struct.setStopEventIsSet(true);
      struct.typeName = iprot.readString();
      struct.setTypeNameIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.comments = new ArrayList<Comments>(_list5.size);
          Comments _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new Comments();
            _elem6.read(iprot);
            struct.comments.add(_elem6);
          }
        }
        struct.setCommentsIsSet(true);
      }
    }
  }

}

